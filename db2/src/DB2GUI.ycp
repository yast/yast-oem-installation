/************************************************************************
 *                                                                      *
 *                         __   __    ____ _____                        *
 *                         \ \ / /_ _/ ___|_   _|                       *
 *                          \ V / _` \___ \ | |                         *
 *                           | | (_| |___) || |                         *
 *                           |_|\__,_|____/ |_|                         *
 *                                                                      *
 *                Module for the IBM DB2 Universal Database             *
 *                                                                      *
 ************************************************************************

   Copyright (C) 2003  SUSE LINUX AG, Nuernberg, Germany

   Author:     David Strbac <strbac@suse.de>

   $Id$


   This file is part of yast2_db2setup.

   yast2_db2setup is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   yast2_db2setup is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with yast2_db2setup; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
   USA


 ************************************************************************
 *                                                                      *
 *  FILE:     DB2GUI.ycp                                                *
 *                                                                      *
 *  FUNCTION: This file contains all GUI functions.                     *
 *                                                                      *
 ***********************************************************************/



{
	module "DB2GUI";

	import "Wizard";
	import "Popup";

	import "./lib/DB2DATA";



	string headline = "empty";
	term contents = nil;
	any retval = nil;


	textdomain "ibm_db2";

	define string get_home_dir()
	``{
		map home = SCR::Execute(.target.bash_output, "echo $HOME");
		return(deletechars(home["stdout"]:"error", "\n"));
	}



	define void feature_not_implemented()
	``{
		Popup::Notify("Feature not yet implemented");
	}





	global define any stage_1(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Welcome to the DB2 Setup wizard";

		/* FIXME: add help text */
		string help_text = sformat("<p>Help text for <b>stage %1</b></p>", wizard_stage);

		contents = `RichText("The DB2 Setup wizard will install DB2 UDB Enterprise Server " +
					  "Edition on your computer. To continue, click Next.");



		/* set wizard content, headline and help text */	
		Wizard::SetContents(headline, contents, help_text, have_back_button,
				    have_next_button);
	
		/* force update FIXME: do we need this? */	
		Wizard::SetStage(wizard_stage, false);

		/* wait for user input */	   
		return(UI::UserInput());
	}



	global define any stage_2(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Software License Agreement";

		/* FIXME: add help text */
		string help_text = sformat("<p>Help text for <b>stage %1</b></p>", wizard_stage);


		/* FIXME: put this into DB2 module */
		/* read license file */
		map output = SCR::Execute(.target.bash_output, "echo $DB2_LICENSE");
		string db2_license = SCR::Read(.target.string, deletechars(output["stdout"]:"error", "\n"));

		/* workaround for M$ DOS file format */
 		list l = splitstring(deletechars(db2_license, "\r"), "\n");

		db2_license = "";

		foreach(`v, l,
		``{if (v == "")
			db2_license = db2_license + "<p>\n";
		else
			db2_license = db2_license + v + "\n";
		});

		contents = `VBox(
				`VWeight(1,
					`RichText("Please read the accompanying license agreement carefulle before " +
						  "using the Program. By selecting \"Accept\" below or using the "     +
						  "Program, you agree to accept the terms of this agreement. If "    +
						  "you select \"Decline\", installation will not be completed and "    +
						  "you will not be able to use this Program.")
				),
				`VWeight(2,
					`RichText(db2_license)
				),
				`RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(0), "&Accept",
						DB2DATA::DB2["LIC_AGREEMENT"]:"error" == "ACCEPT")),
					`Left(`RadioButton(`id(1), "&Decline",
						DB2DATA::DB2["LIC_AGREEMENT"]:"error" == "DECLINE"))
				))
				);


		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);

		Wizard::SetStage(wizard_stage, false);

		while(true)
		{
			retval = UI::UserInput();

			if (retval == `next && UI::QueryWidget(`id(`rb), `CurrentButton) == 1)
			{
				boolean b = Popup::YesNo("You have selected to decline the license agreement.\n" +
							 "Installation has not been completed. You may restart\n" +
							 "installation later or you may return the Program to the\n" +
							 "party (IBM or its reseller) from whom it was acquired and\n" +
							 "request a refund.\n" +
							 "\n" +
							 "Dou you really whish to decline the license agreement?");
				if (b == true)
					b = Popup::YesNo("Are you shure you want to cancel the DB2 UDB Enterprise\n" +
								 "Server Edition installation?");
				if (b == true)
					return(`silent_exit);

				continue;
			}
			else
			{
				if (UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
					DB2DATA::DB2["LIC_AGREEMENT"] = "ACCEPT";
				else
					DB2DATA::DB2["LIC_AGREEMENT"] = "DECLINE";
				return(retval);
			}
		}
	}



	global define any stage_3(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Select the installation type";

		/* FIXME: add help text */
		string help_text = sformat("<p>Help text for <b>stage %1</b></p>", wizard_stage);

		contents = `RadioButtonGroup(`id(`rb), `VBox(
					`HBox(
						`Left(`RadioButton(`id(0), "&Typical: 350 - 420 MB",
							DB2DATA::DB2["INSTALL_TYPE"]:"error" == "TYPICAL")),
						`PushButton( `id(`view_typical_features), _("&View Features ..."))
					),
					`RichText("DB2 will be installed with most features and functionality, using a typical " +
						  "configuration with default values. To add functionality, select the desired " +
						  "functions from the following list."),
					`Frame(_("Additional functions"),
						`Left(`CheckBox(`id(`additional_features), _("&Data warehousing"),
							DB2DATA::DB2["TYPICAL_OPTION"]:"error" == "DATA_WAREHOUSE"))
					),
					`HBox(
						`Left(`RadioButton(`id(1), "&Compact: 270 - 330 MB",
							DB2DATA::DB2["INSTALL_TYPE"]:"error" == "COMPACT")),
						`PushButton( `id(`view_compact_features), _("V&iew Features ..."))
					),
					`RichText("Basic DB2 features and functionality will be installed, and minimal " +
						  "configuration will be performed"),
					`Left(`RadioButton(`id(2), "C&ustom: 270 - 1080 MB",
						DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")),
					`RichText("Select the features that you want installed, and specify configuration options " +
						  "for DB2. This option requires knowledge of DB2 features and settings.")
				));



		Wizard::SetContents(headline, contents, help_text, have_back_button,
				    have_next_button);

		Wizard::SetStage(wizard_stage, false);

		while(true)
		{
			retval = UI::UserInput();

			if (retval == `view_typical_features)
				feature_not_implemented();
			else if (retval == `view_compact_features)
				feature_not_implemented();
			else
			{
				if (UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
					DB2DATA::DB2["INSTALL_TYPE"] = "TYPICAL";
				else if (UI::QueryWidget(`id(`rb), `CurrentButton) == 1)
					DB2DATA::DB2["INSTALL_TYPE"] = "COMPACT";
				else if (UI::QueryWidget(`id(`rb), `CurrentButton) == 2)
					DB2DATA::DB2["INSTALL_TYPE"] = "CUSTOM";
				else
				{
					Popup::Notify("Error");
					return(`silent_exit);
				}

				if (UI::QueryWidget(`id(`additional_features), `Value))
					DB2DATA::DB2["TYPICAL_OPTION"] = "DATA_WAREHOUSE";
				else
					DB2DATA::DB2["TYPICAL_OPTION"] = nil;

				return(retval);
			}
		}
	}



	global define any stage_4(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Select the installation action";

		/* FIXME: add help text */
		string help_text = sformat("<p>Help text for <b>stage %1</b></p>", wizard_stage);

		contents = `VBox(
				`RichText("The DB2 Setup wizard can install DB2 on your computer and create a response file for use " +
					  "in a response file installation. You can use a response file to perform the installation " +
					  "at a later time with no further input, or to replicate the installation on this computer " +
					  "to other computers. " +
					  "<p>" +
					  "If you are setting up a DB2 Enterprise Server Edition (ESE) partitioned database environment, " +
					  "you can also create a response file to install DB2 on the other computers that will act as " +
					  "database partition server."),
				`Left(`CheckBox(`id(`real_install), _("&Install DB2 UDB Enterprise Server Edition on this computer"),
					DB2DATA::DB2["__DB2_INSTALL"]:"error")),
				`Left(`CheckBox(`id(`response_file), _("&Save your settings in a response file"),
					DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error"))
				);



		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button );

		Wizard::SetStage(wizard_stage, false);

		while(true)
		{
			retval = UI::UserInput();

			if (!(UI::QueryWidget(`id(`real_install), `Value)) && !(UI::QueryWidget(`id(`response_file), `Value)) && retval == `next) 
				Popup::Message("No action specified!");
			else
				break;
		}


		if (UI::QueryWidget(`id(`real_install), `Value))
			DB2DATA::DB2["__DB2_INSTALL"] = true;
		else
			DB2DATA::DB2["__DB2_INSTALL"] = false;

		if (UI::QueryWidget(`id(`response_file), `Value))
		{
			DB2DATA::DB2["__DB2_RESPONSE_FILE"] = true;

			if (DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"]:"error" == nil)
				DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"] = get_home_dir() + "/" +
					DB2DATA::DB2["__DB2_DEFAULT_RESPONSE_FILE"]:"error";
		}
		else
		{
			DB2DATA::DB2["__DB2_RESPONSE_FILE"] = false;
			DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"] = nil;
		}




/*		if (UI::QueryWidget(`id(`response_file), `Value))
			if (DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error" == nil)
				DB2DATA::DB2["__DB2_RESPONSE_FILE"] = get_home_dir() + "/" + DB2DATA::DB2["__DB2_DEFAULT_RESPONSE_FILE"]:"error";
		else
			DB2DATA::DB2["__DB2_RESPONSE_FILE"] = nil;
*/
		return(retval);
	}



	global define any stage_5(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Set user information for the DB2 Administration Server";

		/* FIXME: add help text */
		string help_text = sformat("<p>Help text for <b>stage %1</b></p>", wizard_stage);

		map DAS = DB2DATA::DB2["DAS"]:"error";

		contents = `VBox(
				`VWeight(1, `RichText(`opt(`shrinkable),
						"The DB2 Administration Server (DAS) runs on your computer to provide support "  +
						"required by the DB2 tools. A user account with a minimal set of privileges is " +
						"required to run the DAS. Specify the required user information for the DAS.")),
				`VWeight(5, `RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(0), "Ne&w user", true)),
					`VBox(
						`HBox(
							`HWeight(2, `Label("New User")),
							`HWeight(3, `TextEntry(`id(`user_name), "", DAS["DAS_USER_NAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("UID")),
							`HWeight(3, `TextEntry(`id(`uid), "", DAS["DAS_UID"]:"error")),
						 	`HWeight(3, `CheckBox(`id(`default_uid), _("&Use default UID"),
								DAS["DAS_UID"]:"error" == ""))
						),

						`HBox(
							`HWeight(2, `Label("Group name")),
							`HWeight(3, `TextEntry(`id(`group_name), "", DAS["DAS_GROUP_NAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("GID")),
							`HWeight(3, `TextEntry(`id(`gid), "", DAS["DAS_GID"]:"error")),
							`HWeight(3, `CheckBox(`id(`default_gid), _("Use default &GID"),
								DAS["DAS_GID"]:"error" == ""))
						),
						`HBox(
							`HWeight(2, `Label("Password")),
							`HWeight(3, `Password(`id(`passwd), "", DAS["DAS_PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Confirm password")),
							`HWeight(3, `Password(`id(`passwd2), "", DAS["DAS_PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Home directory")),
							`HWeight(3, `TextEntry(`id(`home_dir), "", DAS["DAS_HOME_DIRECTORY"]:"error")),
							`HWeight(3, `HStretch())
						)
					),
					`Left(`RadioButton(`id(1), "&Existing user")), /* FIXME: enable this */
						`HBox(
							`HWeight(2, `Label("User name")),
							`HWeight(3, `TextEntry(`id(`name), "")),
							`HWeight(3, `HStretch())
						),
						`Frame(
							_("For users of NIS or similar management systems"),
							`Label("If the user information in your environment is managed remotely\n" +
								"by NIS or a similar system, you must specify an existing user. ")
						)
					)
				)));



		Wizard::SetContents(headline, contents, help_text, have_back_button, have_next_button);

		Wizard::SetStage(wizard_stage, false);

		while(true)
		{
			retval = UI::UserInput();



			if (UI::QueryWidget(`id(`user_name), `Value) == "" && retval == `next)
			{
				Popup::Message("User Name\nYou must specify a value");
				continue;
			}
			else
				DAS["DAS_USER_NAME"] = UI::QueryWidget(`id(`user_name), `Value);



			if (UI::QueryWidget(`id(`group_name), `Value) == "" && retval == `next)
			{
				Popup::Message("Group Name\nYou must specify a value");
				continue;
			}
			else
				DAS["DAS_GROUP_NAME"] = UI::QueryWidget(`id(`group_name), `Value);



			if (UI::QueryWidget(`id(`home_dir), `Value) == "" && retval == `next)
			{
				Popup::Message("Home directory\nYou must specify a value");
				continue;
			}
			else
				DAS["DAS_HOME_DIRECTORY"] = UI::QueryWidget(`id(`home_dir), `Value);



			if (UI::QueryWidget(`id(`passwd), `Value) != UI::QueryWidget(`id(`passwd2), `Value) && retval == `next)
			{
				Popup::Message("The passwords entered do not match. Please re-enter\n" +
					       "the passwords before continuing");
				continue;
			}
			else if (UI::QueryWidget(`id(`passwd), `Value) == "")
			{
				Popup::Message("Password\nYou must specify a value");
				continue;
			}
			else
				DAS["DAS_PASSWORD"] = UI::QueryWidget(`id(`passwd), `Value);



			if (UI::QueryWidget(`id(`default_uid), `Value))
				DAS["DAS_UID"] = "";
			else if (UI::QueryWidget(`id(`uid), `Value) == "")
			{
				Popup::Message("UID\nYou must specify a value");
				continue;
			}
			else
				DAS["DAS_UID"] = UI::QueryWidget(`id(`uid), `Value);



			if (UI::QueryWidget(`id(`default_gid), `Value))
				DAS["DAS_GID"] = "";
			else if (UI::QueryWidget(`id(`gid), `Value) == "")
			{
				Popup::Message("GID\nYou must specify a value");
				continue;
			}
			else
				DAS["DAS_GID"] = UI::QueryWidget(`id(`gid), `Value);



			return(retval);
		}
	}



	global define any stage_6(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Set up a DB2 instance";

		/* FIXME: add help text */
		string help_text = sformat("<p>Help text for <b>stage %1</b></p>", wizard_stage);

		contents = `VBox(
				`RichText("A DB2 instance is an environment where you con store data and run " +
					  "applications. Select Create a DB2 instance to have the DB2 Setup " +
					  "wizard create an instance for you." +
					  "<p>" +
					  "You can create a DB2 instance later by running the DB2 Setup wizard " +
					  "again. If you are adding a database partition server to a partitioned " +
					  "database environment, do not create an instance on this computer. The " +
					  "instance should be created on the computer where you installed the " +
					  "instance-owning database partition server"),
				`RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(0), "&Create a DB2 instance", true)),
					`Left(`RadioButton(`id(1), "&Do not create a DB2 instance")),
				`RichText("You can defer the task of creating a DB2 instance until after " +
					  "installation is complete. If you are adding a database partition " +
					  "server to a partitioned database environment, you should not " +
					  "create an instance on this computer.")
				)));

		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);

		Wizard::SetStage(wizard_stage, false);

		retval = UI::UserInput();

		if(UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
			 feature_not_implemented();

		return(retval);
	}



	global define any stage_7(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Set up the administration contact list";

		/* FIXME: add help text */
		string help_text = sformat( "<p>Help text for <b>stage %1</b></p>", wizard_stage );

		map DAS = DB2DATA::DB2["DAS"]:"error";

		contents = `VBox(
				`RichText("The administration contact list will store contact information used to " +
					  "notify administrators that a database requires attention. Specify whether " +
					  "you want to create a local contact list or use an existing global contact " +
					  "list that resides on a remote DB2 server."),
				`Frame(_("Administration contact list location"),
					`RadioButtonGroup(`id(`rb), `VBox(
						`Left(`RadioButton(`id(0), "&Local - Create a contact list on this system",
							DAS["DAS_CONTACT_LIST"]:"error" == "LOCAL")),
						`Left(`RadioButton(`id(1), "Re&mote - Use an existing contact list that resides " +
							"on a remote DB2 server",
							DAS["DAS_CONTACT_LIST"]:"error" == "REMOTE")),
						`HBox(
							`Label("Remote DB2 server host name"),
							`TextEntry(`id(`host_name), "", DAS["DAS_CONTACT_LIST_HOSTNAME"]:"error")
						)
					))
				),
				`Frame(_("Notification SMTP server"), `VBox(
					`RichText("Type the SMTP server that will send email and pager notifications " +
						"to your administration contact."),
					`Left(`CheckBox(`id(`enable_notification), _("&Enable notification"),
						DAS["DAS_SMTP_SERVER"]:"error" != "")),
					`HBox(
						`Label("Notification SMTP server"),
						`TextEntry(`id(`smtp_server), "", DAS["DAS_SMTP_SERVER"]:"error")
					)
				)));


		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);

		Wizard::SetStage(wizard_stage, false);

		while(true)
		{
			retval = UI::UserInput();



			if (retval == `next)
			{
				if (UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
				{
					DAS["DAS_CONTACT_LIST"] = "LOCAL";
					DAS["DAS_CONTACT_LIST_HOSTNAME"] = "";
				}
				else if (UI::QueryWidget(`id(`host_name), `Value) == "")
				{
					Popup::Message("Remote DB2 server host name missing");
					continue;
				}
				else
				{
					DAS["DAS_CONTACT_LIST"] = "REMOTE";
					DAS["DAS_CONTACT_LIST_HOSTNAME"] = UI::QueryWidget(`id(`host_name), `Value );
				}

				if (UI::QueryWidget(`id(`enable_notification), `Value))
				{
					if (UI::QueryWidget(`id(`smtp_server), `Value) == "")
					{
						Popup::Message("SMTP server name missing");
						continue;
					}
					else
						DAS["DAS_SMTP_SERVER"] = UI::QueryWidget(`id(`smtp_server), `Value);
				}
				else
					DAS["DAS_SMTP_SERVER"] = "";
			}

			return(retval);
		}
	}



	global define any stage_8(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{

		if (DB2DATA::DB2["__DB2_INSTALL"]:"error" && DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error")
		{
			headline = "Start copying files and create a response file";

			contents = `VBox(
					`RichText("Setup has enough information to create a response file and start " +
						  "copying the program files. If you want to " +
						  "review or change any settings, click Back. If you are satisfied with " +
						  "the settings, type the response file name and click Next to begin copying " +
						  "files."),
					`Left(`Label(_("Current settings"))),
					`RichText(_("not yet implemented :-)")),
					`TextEntry(`id(`response_file), _("R&esponse file name"),
						DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"]:"error")
					);

		}
		else if (DB2DATA::DB2["__DB2_INSTALL"]:"error")
		{
			headline = "Start copying files";

			contents = `VBox(
					`RichText("The DB2 Setup wizard has enough information to start copying the " +
						  "program files. If you want to review or change any settings, click " +
						  "Back. If you are satisfied with the settings, click Finish to begin " +
						  "copying files."),
					`Left(`Label("Current settings")),
					`RichText(_("not yet implemented :-)"))
					);
		}
		else if (DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error")
		{
			headline = "Create a response file";

			contents = `VBox(
					`RichText("The DB2 Setup wizard has enough information to create a response file. " +
						  "If you want to review or change any settings, click " +
						  "Back. If you are satisfied with the settings, type the response file " +
						  "name and click Finish to create it."),
					`Left(`Label("Current settings")),
					`RichText(_("not yet implemented :-)")),
					`TextEntry(`id(`response_file), _("R&esponse file name"),
						DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"]:"error")
					);
		}
		else
			Popup::Notify("Internal Error");


		/* FIXME: add help text */
		string help_text = sformat( "<p>Help text for <b>stage %1</b></p>", wizard_stage );


		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button );

		Wizard::SetStage(wizard_stage, false);

		retval = UI::UserInput();

		if (DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error")
			DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"] = UI::QueryWidget(`id(`response_file), `Value);

		return(retval);
	}





	global define any stage_9()
	``{
		/* there is no GUI for this stage */
		if (DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error")
			return(DB2INSTALL::write_response_file(DB2DATA::DB2));
		else
			return(`ok);
	}





	global define any stage_10(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{

		if (DB2DATA::DB2["__DB2_INSTALL"]:"error")
		{
			headline = "Install DB2 UDB Enterprise Server Edition";

			/* FIXME: add help text */
			string help_text = sformat( "<p>Help text for <b>stage %1</b></p>", wizard_stage);

			contents = `RichText("Please wait while DB2 Setup wizard installs DB2 UDB Enterprise " +
					     "Server Edition on your computer and performs the required " +
					     "configuration. This may take several minutes. ");
				
			/* set wizard content, headline and help text */	
			Wizard::SetContents(headline, contents, help_text, have_back_button,
					    have_next_button);
	
			/* force update FIXME: do we need this? */	
			Wizard::SetStage(wizard_stage, false);

			/* install DB2 UDB */
			return(DB2INSTALL::install_db2(DB2DATA::DB2));
		}
		else
			return(`ok);
	}





	global define any stage_11(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline = "Setup is complete";

		/* FIXME: add help text */
		string help_text = sformat( "<p>Help text for <b>stage %1</b></p>", wizard_stage);

		contents = `VBox(
				`RichText("The DB2 Setup wizard has finished copying files and configuring " +
					  "your system" +
					  "<p>" +
					  "<h3>Post-install steps</h3>" +
					  "It is recommended that you perform the following after installation, " +
					  "if you have not already done so." +
					  "<ul>" +
					  "<li>Install the DB2 documentation from CD labelled DB2 HTML Documentation.</li>" +
					  "" +
					  "<li>Set up a DB2 instance to work with DB2.</li>" +
					  "" +
					  "<li>Specify the SMTP Server to be used by the DB2 Administration Server to send" +
					  "notifications to administration contacts.</li>" +
					  "" +
					  "<li>Run First Steps (db2fs) as a regular user to get started with DB2 and some" +
					  "of its features.</li>" +
					  "</ul>"),
				`PushButton(`id(`view_status_report), _("&Status report")),
				`Left(`Label("Click Finish to exit the DB2 Setup wizard."))
				);


		/* set wizard content, headline and help text */	
		Wizard::SetContents(headline, contents, help_text, have_back_button,
				    have_next_button);
	
		/* force update FIXME: do we need this? */	
		Wizard::SetStage(wizard_stage, false);

		while(true)
		{
			retval = UI::UserInput();

			if (retval == `view_status_report)
				view_status_report();
			else
				return(retval);
		}
	}


	define void view_status_report()
	``{
		UI::{
	                /* read log file */
        	        map output = SCR::Execute(.target.bash_output, "echo $DB2_LOG");
                	string db2_log = SCR::Read(.target.string, deletechars(output["stdout"]:"error", "\n"));

			OpenDialog(
				`opt(`defaultsize),
				`VBox(
					`Label("Status report"),
					`RichText(`opt(`plainText), db2_log),
                     			`PushButton(`opt(`default), CloseButtonLabel())
				));
			UserInput();
			CloseDialog();
		};
	}


}
