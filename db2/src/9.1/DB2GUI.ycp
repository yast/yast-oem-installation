/************************************************************************
 *                                                                      *
 *                         __   __    ____ _____                        *
 *                         \ \ / /_ _/ ___|_   _|                       *
 *                          \ V / _` \___ \ | |                         *
 *                           | | (_| |___) || |                         *
 *                           |_|\__,_|____/ |_|                         *
 *                                                                      *
 *                Module for the IBM DB2 Universal Database             *
 *                                                                      *
 ************************************************************************

   Copyright (C) 2003  SUSE LINUX AG, Nuernberg, Germany

   Author:	David Strbac <strbac@suse.de>
		Frank Balzer <frank.balzer@suse.com>

   $Id$


   This file is part of yast2_db2setup.

   yast2_db2setup is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   yast2_db2setup is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with yast2_db2setup; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
   USA


 ************************************************************************
 *                                                                      *
 *  FILE:     DB2GUI.ycp                                                *
 *                                                                      *
 *  FUNCTION: This file contains all GUI functions.                     *
 *                                                                      *
 ***********************************************************************/



{
	module "DB2GUI";
	import "StorageDevices";
	import "Wizard";
	import "Popup";
	

	import "DB2DATA";
	import "DB2INSTALL";

	


	string headline = "empty";
	term contents = nil;
	any retval = nil;


	textdomain "ibm_db2";

	define string get_home_dir()
	``{
		map home = (map) SCR::Execute(.target.bash_output, "echo $HOME");
		return(deletechars(home["stdout"]:"error", "\n"));
	}

	define list<string> get_cdroms()
	``{
		list<string> ret = [];

		ret = add(ret,"No device selected");
				
		foreach(map k, (list<map>)StorageDevices::cddrives,
			``{ret = add(ret, k["linkname"]:"No device Found"); 	y2milestone("Cdroms: %1", k["linkname"]:"No device Found");} );
		/*
		foreach(map a,m,
			``{ foreach(string k,string v,map a,
				``{Popup::Message("Key: " + k + " value: " + v);});
				});
		*/
		y2milestone("Cdroms: %1",ret);
		return ret;
	}

	define string get_mountpoint(string what)
	``{
		list<map> l = (list<map>)SCR::Read(.etc.mtab);
		y2milestone("Cdrom Mountpoint: %1",l);
		foreach(map k, l,
			``{if(k["spec"]:"error" == what) {
				y2milestone("Cdrom Mountpoint: %1",k["file"]:"error");
				return(k["file"]:"error");
			   }
			   else {
				y2milestone("Cdrom Mountpoint: %1",k);
			}
				});

		list s = splitstring(what,"/");
		integer i = size(s);
		string ret = (string)select(s,i-1,"cdrom");
		ret = "/media/" + ret;
		return ret;
	}
		
		
	

	define boolean mount(string what) 
	``{
		
		map m = (map) SCR::Execute(.target.bash_output,"mount " + what);
		if (m["exit"]:1 == 0) {
			return(true);
		}
		else {
			Popup::Message("Error mounting " + what + "\n" + m["stderr"]:"An undefined error occured");
			return(false);
		}
	}

	define boolean umount(string what) 
	``{
		
		map m = (map) SCR::Execute(.target.bash_output,"umount " + what);
		if (m["exit"]:1 == 0) {
			return(true);
		}
		else {
			return(false);
		}
	}
	define boolean file_exists(string what) 
	``{
		map m = (map) SCR::Execute(.target.bash_output,"test -x " + what);
			if (m["exit"]:1 == 0) {
			return(true);
		}
		else {
			return(false);
		}
	}
		
	
				



	define void feature_not_implemented()
	``{
		Popup::Notify("Feature not yet implemented");
	}


	define string help(integer stage)
	``{
		string file = DB2DATA::DB2["__PATH_TO_SETUP"]:"" + "/" +
			      DB2DATA::DB2_HELP["__BASE"]:"" +  "/" +
			      DB2DATA::DB2_HELP["__LANG"]:"" +  "/" +
			      DB2DATA::DB2_HELP[tostring(stage)]:"";
		y2milestone("Helpfile: %1",file);		 
		return((string)SCR::Read(.target.string,file));
	}	


	global define any stage_1(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		

		headline  = "Welcome to the DB2 Setup wizard";

		
		string help_text = help(wizard_stage);

		contents = `VBox(
				`RichText("The DB2 Setup wizard will install DB2 UDB Enterprise Server " +
					  "Edition on your computer.<p> Before you can continue, please insert the installation media in your CDROM drive and select the right device."),

				`HBox(
					`HWeight(2, `Label("CDROM Device:")),
					`HWeight(3, `ComboBox(`id(`device),"", get_cdroms())),
					`HWeight(3, `HStretch())
				),
				`VStretch()
				);				

		/* set wizard content, headline and help text */	
		Wizard::SetContents(headline, contents, help_text, have_back_button,
				    have_next_button);
		UI::ChangeWidget(`id(`device),`Notify,true);
		/* wait for user input */
		while(true) {
			retval = UI::UserInput();
			if(retval == `abort) {
				return(retval);
			}
			if(retval == `next) {
				if(DB2DATA::DB2["__PATH_TO_SETUP"]:"" == "" ) {
					Popup::Message("You must select a CDROM-device!");
					continue;
				}
				else {
					return(retval);
				}
			}
			else {
				if (UI::QueryWidget(`id(`device), `Value) ==  "No device selected") {
					Popup::Message("You must select a CDROM-device!");
					continue;
				}
				else {
					string cdrom  = (string)UI::QueryWidget(`id(`device), `Value);
					boolean c = mount(cdrom);
					if (c) {
						string cdrompath = get_mountpoint(cdrom);
						if(file_exists(cdrompath + "/db2setup")) {
							DB2DATA::DB2["__PATH_TO_SETUP"] = cdrompath;
							continue;
						}
						else {
							DB2DATA::DB2["__PATH_TO_SETUP"] = "";
							Popup::Message("Can't find programm db2setup on the " + cdrom);
							umount(cdrom);
							continue;
						}			
	
					}
					else {
						umount(cdrom);
					}
				}
			}
		}
					
			

			
	}



	global define any stage_2(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Software License Agreement";

		
		string help_text = help(wizard_stage);


		/* FIXME: put this into DB2 module */
		/* read license file */
	
		map output = (map) SCR::Execute(.target.bash_output, "echo " + DB2DATA::DB2["__PATH_TO_SETUP"]:"/media/cdrom" + "/db2/license/en_US.iso88591/ese_LI_en"); 	
		/*string db2_license = SCR::Read("/data3/DB2/db2linux/db2linux/db2linux_v81fp5/ese/db2/license/de_DE", "de_DE.iso88591");*/
		
		string db2_license = (string) SCR::Read(.target.string, deletechars(output["stdout"]:"error", "\n"));

		/* workaround for M$ DOS file format */
 		list<string> l = splitstring(deletechars(db2_license, "\r"), "\n");

		db2_license = "";

		foreach(string v, l,
		``{if (v == "")
			db2_license = db2_license + "<p>\n";
		else
			db2_license = db2_license + v + "\n";
		});
		

		
		contents = `VBox(
				`VWeight(1,
					`RichText("Please read the accompanying license agreement carefulle before " +
						  "using the Program. By selecting \"Accept\" below or using the "     +
						  "Program, you agree to accept the terms of this agreement. If "    +
						  "you select \"Decline\", installation will not be completed and "    +
						  "you will not be able to use this Program.")
				),
				`VWeight(2,
					`RichText( db2_license )
				),
				`RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(0), "&Accept",
						DB2DATA::DB2["LIC_AGREEMENT"]:"error" == "ACCEPT")),
					`Left(`RadioButton(`id(1), "&Decline",
						DB2DATA::DB2["LIC_AGREEMENT"]:"error" == "DECLINE"))
				))
				);


		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);
		
		
		while(true)
		{
			retval = UI::UserInput();

			if (retval == `next && UI::QueryWidget(`id(`rb), `CurrentButton) == 1)
			{
				boolean b = Popup::YesNo("You have selected to decline the license agreement.\n" +
							 "Installation has not been completed. You may restart\n" +
							 "installation later or you may return the Program to the\n" +
							 "party (IBM or its reseller) from whom it was acquired and\n" +
							 "request a refund.\n" +
							 "\n" +
							 "Dou you really whish to decline the license agreement?");
				if (b == true)
					b = Popup::YesNo("Are you shure you want to cancel the DB2 UDB Enterprise\n" +
								 "Server Edition installation?");
				if (b == true)
					return(`silent_exit);

				continue;
			}
			else
			{
				if (UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
					DB2DATA::DB2["LIC_AGREEMENT"] = "ACCEPT";
				else
					DB2DATA::DB2["LIC_AGREEMENT"] = "DECLINE";
				return(retval);
			}
		}
	}



	global define any stage_3(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline  = "Select the installation type";

		string help_text = help(wizard_stage);

		contents = `RadioButtonGroup(`id(`rb), `VBox(
					`HBox(
						`Left(`RadioButton(`id(0), "&Typical: 350 - 420 MB",
							DB2DATA::DB2["INSTALL_TYPE"]:"error" == "TYPICAL"))
						/*`PushButton( `id(`view_typical_features), _("&View Features ..."))*/
					),
					`RichText("DB2 will be installed with most features and functionality, using a typical " +
						  "configuration with default values. To add functionality, select the desired " +
						  "functions from the following list."),
					`Frame(_("Additional functions"),
						`Left(`CheckBox(`id(`additional_features), _("&Data warehousing"),
							DB2DATA::DB2["TYPICAL_OPTION"]:"error" == "DATA_WAREHOUSE"))
					),
					`HBox(
						`Left(`RadioButton(`id(1), "&Compact: 270 - 330 MB",
							DB2DATA::DB2["INSTALL_TYPE"]:"error" == "COMPACT"))
						/*`PushButton( `id(`view_compact_features), _("V&iew Features ..."))*/
					),
					`RichText("Basic DB2 features and functionality will be installed, and minimal " +
						  "configuration will be performed"),
					`Left(`RadioButton(`id(2), "C&ustom: 270 - 1080 MB",
						DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")),
					`RichText("Select the features that you want installed, and specify configuration options " +
						  "for DB2. This option requires knowledge of DB2 features and settings.<p>This option will start the <b>DB2 Setup Wizard</b>")
				));



		Wizard::SetContents(headline, contents, help_text, have_back_button,
				    have_next_button);

		while(true)
		{
			retval = UI::UserInput();

			if (retval == `view_typical_features)
				feature_not_implemented();
			else if (retval == `view_compact_features)
				feature_not_implemented();
			else
			{
				if (UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
					DB2DATA::DB2["INSTALL_TYPE"] = "TYPICAL";
				else if (UI::QueryWidget(`id(`rb), `CurrentButton) == 1)
					DB2DATA::DB2["INSTALL_TYPE"] = "COMPACT";
				else if (UI::QueryWidget(`id(`rb), `CurrentButton) == 2)
					DB2DATA::DB2["INSTALL_TYPE"] = "CUSTOM";
				else
				{
					Popup::Notify("Error");
					return(`silent_exit);
				}

				if ((boolean) UI::QueryWidget(`id(`additional_features), `Value) )
					DB2DATA::DB2["TYPICAL_OPTION"] = "DATA_WAREHOUSE";
				else
					DB2DATA::DB2["TYPICAL_OPTION"] = nil;

				return(retval);
			}
		}
	}

	

	global define any stage_4(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);
	
		headline  = "Select the installation action";

		string help_text = help(wizard_stage);

		contents = `VBox(
				`RichText("The DB2 Setup wizard can install DB2 on your computer and create a response file for use " +
					  "in a response file installation. You can use a response file to perform the installation " +
					  "at a later time with no further input, or to replicate the installation on this computer " +
					  "to other computers. " +
					  "<p>" +
					  "If you are setting up a DB2 Enterprise Server Edition (ESE) partitioned database environment, " +
					  "you can also create a response file to install DB2 on the other computers that will act as " +
					  "database partition server."),
				`Left(`CheckBox(`id(`real_install), _("&Install DB2 UDB Enterprise Server Edition on this computer"),
					DB2DATA::DB2["__DB2_INSTALL"]:false)),
				`Left(`CheckBox(`id(`response_file), _("&Save your settings in a response file"),
					DB2DATA::DB2["__DB2_RESPONSE_FILE"]:false))
				);



		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button );

		while(true)
		{
			retval = UI::UserInput();

			if ((boolean)UI::QueryWidget(`id(`real_install), `Value) == false
				 && (boolean)UI::QueryWidget(`id(`response_file), `Value) == false
				 && retval == `next)  {
					Popup::Message("No action specified!");
			}
			else {	
				break;
			}
		}


		if ((boolean)UI::QueryWidget(`id(`real_install), `Value))
			DB2DATA::DB2["__DB2_INSTALL"] = true;
		else
			DB2DATA::DB2["__DB2_INSTALL"] = false;

		if ((boolean)UI::QueryWidget(`id(`response_file), `Value))
		{
			DB2DATA::DB2["__DB2_RESPONSE_FILE"] = true;

			if (DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"]:"error" == nil)
				DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"] = get_home_dir() + "/" +
					DB2DATA::DB2["__DB2_DEFAULT_RESPONSE_FILE"]:"error";
		}
		else
		{
			DB2DATA::DB2["__DB2_RESPONSE_FILE"] = false;
			DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"] = nil;
		}




/*		if (UI::QueryWidget(`id(`response_file), `Value))
			if (DB2DATA::DB2["__DB2_RESPONSE_FILE"]:"error" == nil)
				DB2DATA::DB2["__DB2_RESPONSE_FILE"] = get_home_dir() + "/" + DB2DATA::DB2["__DB2_DEFAULT_RESPONSE_FILE"]:"error";
		else
			DB2DATA::DB2["__DB2_RESPONSE_FILE"] = nil;
*/
		return(retval);
	}



	define list get_users() 
	``{
		string s = "";
		map m = (map) SCR::Execute(.target.bash_output,"cat /etc/passwd | cut -d \":\" -f1",$["stdout": s]);
		list l = splitstring(m["stdout"]:"none","\n");
		return l;
	}

	define void das_check() 
	``{
		UI::ChangeWidget(`id(`rb1),`Notify,true);
		UI::ChangeWidget(`id(`rb2),`Notify,true);
		if ((boolean)UI::QueryWidget(`id(`rb1),`Value) == true) {
			UI::ChangeWidget(`id(`name),`Enabled,false);
			UI::ChangeWidget(`id(`user_name),`Enabled,true);
			UI::ChangeWidget(`id(`uid),`Enabled,true);
			UI::ChangeWidget(`id(`group_name),`Enabled,true);
			UI::ChangeWidget(`id(`gid),`Enabled,true);
			UI::ChangeWidget(`id(`default_gid),`Enabled,true);
			UI::ChangeWidget(`id(`passwd),`Enabled,true);
			UI::ChangeWidget(`id(`passwd2),`Enabled,true);
			UI::ChangeWidget(`id(`home_dir),`Enabled,true);
			DB2DATA::DB2_DAS["__NEW_USER"] = true;
			DB2DATA::DB2_DAS["__EXISTING_USER"] = false;
			
			
		}
		else {
			UI::ChangeWidget(`id(`name),`Enabled,true);
			UI::ChangeWidget(`id(`user_name),`Enabled,false);
			UI::ChangeWidget(`id(`uid),`Enabled,false);
			UI::ChangeWidget(`id(`group_name),`Enabled,false);
			UI::ChangeWidget(`id(`gid),`Enabled,false);
			UI::ChangeWidget(`id(`default_gid),`Enabled,false);
			UI::ChangeWidget(`id(`passwd),`Enabled,false);
			UI::ChangeWidget(`id(`passwd2),`Enabled,false);
			UI::ChangeWidget(`id(`home_dir),`Enabled,false);
			DB2DATA::DB2_DAS["__NEW_USER"] = false;
			DB2DATA::DB2_DAS["__EXISTING_USER"] = true;
		}
	}	



	global define any stage_5(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{

		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);
		headline  = "Set user information for the DB2 Administration Server";

		string help_text = help(wizard_stage);

		

		contents = `VBox(
				`VWeight(1, `RichText(`opt(`shrinkable),
						"The DB2 Administration Server (DAS) runs on your computer to provide support "  +
						"required by the DB2 tools. A user account with a minimal set of privileges is " +
						"required to run the DAS. Specify the required user information for the DAS.")),
				`VWeight(5, `RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(`rb1), "Ne&w user", DB2DATA::DB2_DAS["__NEW_USER"]:false )),
					`VBox(
						`HBox(
							`HWeight(2, `Label("New User")),
							`HWeight(3, `TextEntry(`id(`user_name), "", DB2DATA::DB2_DAS["DAS_USERNAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("UID")),
							`HWeight(3, `TextEntry(`id(`uid), "", DB2DATA::DB2_DAS["DAS_UID"]:"error")),
						 	`HWeight(3, `CheckBox(`id(`default_uid), _("&Use default UID"),
								DB2DATA::DB2_DAS["DAS_UID"]:"" == ""))
						),

						`HBox(
							`HWeight(2, `Label("Group name")),
							`HWeight(3, `TextEntry(`id(`group_name), "", DB2DATA::DB2_DAS["DAS_GROUP_NAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("GID")),
							`HWeight(3, `TextEntry(`id(`gid), "", DB2DATA::DB2_DAS["DAS_GID"]:"error")),
							`HWeight(3, `CheckBox(`id(`default_gid), _("Use default &GID"),
								DB2DATA::DB2_DAS["DAS_GID"]:"" == ""))
						),
						`HBox(
							`HWeight(2, `Label("Password")),
							`HWeight(3, `Password(`id(`passwd), "", DB2DATA::DB2_DAS["DAS_PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Confirm password")),
							`HWeight(3, `Password(`id(`passwd2), "", DB2DATA::DB2_DAS["DAS_PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Home directory")),
							`HWeight(3, `TextEntry(`id(`home_dir), "", DB2DATA::DB2_DAS["DAS_HOME_DIRECTORY"]:"error")),
							`HWeight(3, `HStretch())
						)
					),
					`Left(`RadioButton(`id(`rb2), "&Existing user", DB2DATA::DB2_DAS["__EXISTING_USER"]:false )), /* FIXME: enable this */
						`HBox(
							`HWeight(2, `Label("User name")),
							`HWeight(3, `ComboBox(`id(`name),"", get_users())),
							`HWeight(3, `HStretch())
						),
						`Frame(
							_("For users of NIS or similar management systems"),
							`Label("If the user information in your environment is managed remotely\n" +
								"by NIS or a similar system, you must specify an existing user. ")
						)
					)
				)));



		Wizard::SetContents(headline, contents, help_text, have_back_button, have_next_button);
		das_check();
			

		while(true)
		{
			retval = UI::UserInput();
			
			
			das_check();


			if (retval == `rb1 || retval == `rb2) {
				continue;
			}


			if(retval == `back || retval == `abort) {
				return retval;
			}
		
			if ( DB2DATA::DB2_DAS["__NEW_USER"]:false == true) {

				if (UI::QueryWidget(`id(`user_name), `Value) == "" && retval == `next) {
					Popup::Message("User Name\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_DAS["DAS_USERNAME"] = UI::QueryWidget(`id(`user_name), `Value);



				if (UI::QueryWidget(`id(`group_name), `Value) == "" && retval == `next)
				{
					Popup::Message("Group Name\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_DAS["DAS_GROUP_NAME"] = UI::QueryWidget(`id(`group_name), `Value);



				if (UI::QueryWidget(`id(`home_dir), `Value) == "" && retval == `next)
				{
					Popup::Message("Home directory\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_DAS["DAS_HOME_DIRECTORY"] = UI::QueryWidget(`id(`home_dir), `Value);



				if (UI::QueryWidget(`id(`passwd), `Value) != UI::QueryWidget(`id(`passwd2), `Value) && retval == `next)
				{
					Popup::Message("The passwords entered do not match. Please re-enter\n" +
						       "the passwords before continuing");
					continue;
				}
				else if (UI::QueryWidget(`id(`passwd), `Value) == "")
				{
					Popup::Message("Password\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_DAS["DAS_PASSWORD"] = UI::QueryWidget(`id(`passwd), `Value);

				if ((boolean)UI::QueryWidget(`id(`default_uid), `Value) == true )
					DB2DATA::DB2_DAS["DAS_UID"] = "";
				else if (UI::QueryWidget(`id(`uid), `Value) == "")
				{
					Popup::Message("UID\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_DAS["DAS_UID"] = UI::QueryWidget(`id(`uid), `Value);



				if ((boolean)UI::QueryWidget(`id(`default_gid), `Value) == true) 
					DB2DATA::DB2_DAS["DAS_GID"] = "";
				else if (UI::QueryWidget(`id(`gid), `Value) == "")
				{
					Popup::Message("GID\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_DAS["DAS_GID"] = UI::QueryWidget(`id(`gid), `Value);

	
				return(retval);
			}
			else if ( DB2DATA::DB2_DAS["__EXISTING_USER"]:false == true) {
				DB2DATA::DB2_DAS["DAS_USERNAME"] = UI::QueryWidget(`id(`name), `Value);
				return retval;
			}
		}
		return retval;
	}



	global define any stage_6(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);

		DB2DATA::DB2["__GO_BACK"] = false;
		headline  = "Set up a DB2 instance";

		string help_text = help(wizard_stage);

		contents = `VBox(
				`RichText("A DB2 instance is an environment where you con store data and run " +
					  "applications. Select Create a DB2 instance to have the DB2 Setup " +
					  "wizard create an instance for you." +
					  "<p>" +
					  "You can create a DB2 instance later by running the DB2 Setup wizard " +
					  "again. If you are adding a database partition server to a partitioned " +
					  "database environment, do not create an instance on this computer. The " +
					  "instance should be created on the computer where you installed the " +
					  "instance-owning database partition server"),
				`RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(0), "&Create a DB2 instance", true)),
					`Left(`RadioButton(`id(1), "&Do not create a DB2 instance")),
				`RichText("You can defer the task of creating a DB2 instance until after " +
					  "installation is complete. If you are adding a database partition " +
					  "server to a partitioned database environment, you should not " +
					  "create an instance on this computer.")
				)));

		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);

		retval = UI::UserInput();

		if(UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
			 DB2DATA::DB2["__CREATE_INSTANCE"] = true;
		else 
			 DB2DATA::DB2["__CREATE_INSTANCE"] = false;
			
		return(retval);
	}

	global define any stage_6a(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		if ( DB2DATA::DB2["__GO_BACK"]:false == true) {
			return(`back);
		}
		if(DB2DATA::DB2["__CREATE_INSTANCE"]:false == false) {
				return(`next);	
		}
		
		if( DB2DATA::DB2["__CREATE_INSTANCE"]:false == true) {
			headline = "Set how the instance will be used";
		 	string help_text = help(wizard_stage);

			contents = `VBox(
					`RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(0), "&Single-partition instance",DB2DATA::DB2_INST["__SINGLE"]:false)),
					`RichText("The instance will reside only on this computer." +
						  "Select this option if the instance will not be used in a partitioned database environment."),
					`Left(`RadioButton(`id(1), "&Partitioned instance",DB2DATA::DB2_INST["__MULTIPLE"]:false)),
					`RichText("The instance will be used in a partitioned database environment and will reside on multiple database partition servers. This computer will host the instance-owning database partition server. Select this option to use the partitioning capability of DB2")
					)));
			Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);
			
			retval = UI::UserInput();
			if(UI::QueryWidget(`id(`rb), `CurrentButton) == 0) {
				DB2DATA::DB2_INST["__SINGLE"] = true;
				DB2DATA::DB2_INST["__MULTIPLE"] = false;	
			}
			else {
				DB2DATA::DB2_INST["__SINGLE"] = false;
				DB2DATA::DB2_INST["__MULTIPLE"] = true;
			}
			return(retval);
		}
		if ( DB2DATA::DB2["__GO_BACK"]:false == false) {
			return(`next);
		}

		return(`back);
	}

	define void inst_check() 
	``{
		UI::ChangeWidget(`id(`rb1),`Notify,true);
		UI::ChangeWidget(`id(`rb2),`Notify,true);
		if ((boolean)UI::QueryWidget(`id(`rb1),`Value) == true) {
			UI::ChangeWidget(`id(`name),`Enabled,false);
			UI::ChangeWidget(`id(`user_name),`Enabled,true);
			UI::ChangeWidget(`id(`uid),`Enabled,true);
			UI::ChangeWidget(`id(`group_name),`Enabled,true);
			UI::ChangeWidget(`id(`gid),`Enabled,true);
			UI::ChangeWidget(`id(`default_gid),`Enabled,true);
			UI::ChangeWidget(`id(`passwd),`Enabled,true);
			UI::ChangeWidget(`id(`passwd2),`Enabled,true);
			UI::ChangeWidget(`id(`home_dir),`Enabled,true);
			DB2DATA::DB2_INST["__NEW_USER"] = true;
			DB2DATA::DB2_INST["__EXISTING_USER"] = false;
			
			
		}
		else {
			UI::ChangeWidget(`id(`name),`Enabled,true);
			UI::ChangeWidget(`id(`user_name),`Enabled,false);
			UI::ChangeWidget(`id(`uid),`Enabled,false);
			UI::ChangeWidget(`id(`group_name),`Enabled,false);
			UI::ChangeWidget(`id(`gid),`Enabled,false);
			UI::ChangeWidget(`id(`default_gid),`Enabled,false);
			UI::ChangeWidget(`id(`passwd),`Enabled,false);
			UI::ChangeWidget(`id(`passwd2),`Enabled,false);
			UI::ChangeWidget(`id(`home_dir),`Enabled,false);
			DB2DATA::DB2_INST["__NEW_USER"] = false;
			DB2DATA::DB2_INST["__EXISTING_USER"] = true;
		}
	}

	global define any stage_6b(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);

		


		if(DB2DATA::DB2["__CREATE_INSTANCE"]:false == false) {
			return(`next);	
		}

		headline  = "Set user information for the DB2 instance owner";

		string help_text = help(wizard_stage);

		

		contents = `VBox(
				`VWeight(1, `RichText(`opt(`shrinkable),"Specifiy the the instance-owning user information for the DB2 instance. DB2 will use this user to perform instance functions, and will store instance information in the user's home directory. The name of the instance will be the same as user name. You can create a new user or use an existing one.")),
				`VWeight(5, `RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(`rb1), "Ne&w user", DB2DATA::DB2_INST["__NEW_USER"]:false )),
					`VBox(
						`HBox(
							`HWeight(2, `Label("New User")),
							`HWeight(3, `TextEntry(`id(`user_name), "", DB2DATA::DB2_INST["NAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("UID")),
							`HWeight(3, `TextEntry(`id(`uid), "", DB2DATA::DB2_INST["UID"]:"error")),
						 	`HWeight(3, `CheckBox(`id(`default_uid), _("&Use default UID"),
								DB2DATA::DB2_INST["UID"]:"" == ""))
						),

						`HBox(
							`HWeight(2, `Label("Group name")),
							`HWeight(3, `TextEntry(`id(`group_name), "", DB2DATA::DB2_INST["GROUP_NAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("GID")),
							`HWeight(3, `TextEntry(`id(`gid), "", DB2DATA::DB2_INST["GID"]:"error")),
							`HWeight(3, `CheckBox(`id(`default_gid), _("Use default &GID"),
								DB2DATA::DB2_INST["GID"]:"" == ""))
						),
						`HBox(
							`HWeight(2, `Label("Password")),
							`HWeight(3, `Password(`id(`passwd), "", DB2DATA::DB2_INST["PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Confirm password")),
							`HWeight(3, `Password(`id(`passwd2), "", DB2DATA::DB2_INST["PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Home directory")),
							`HWeight(3, `TextEntry(`id(`home_dir), "", DB2DATA::DB2_INST["HOME_DIRECTORY"]:"error")),
							`HWeight(3, `HStretch())
						)
					),
					`Left(`RadioButton(`id(`rb2), "&Existing user", DB2DATA::DB2_INST["__EXISTING_USER"]:false )), 
						`HBox(
							`HWeight(2, `Label("User name")),
							`HWeight(3, `ComboBox(`id(`name),"", get_users())),
							`HWeight(3, `HStretch())
						),
						`Frame(
							_("For users of NIS or similar management systems"),
							`Label("If the user information in your environment is managed remotely\n" +
								"by NIS or a similar system, you must specify an existing user. ")
						)
					)
				)));



		Wizard::SetContents(headline, contents, help_text, have_back_button, have_next_button);
		inst_check();
			

		while(true)
		{
			retval = UI::UserInput();
			
			
			inst_check();


			if (retval == `rb1 || retval == `rb2) {
				continue;
			}


			if(retval == `back || retval == `abort) {
				return retval;
			}
		
			if ( DB2DATA::DB2_INST["__NEW_USER"]:false == true) {

				if (UI::QueryWidget(`id(`user_name), `Value) == "" && retval == `next) {
					Popup::Message("User Name\nYou must specify a value");
					continue;
				}
				else {
					DB2DATA::DB2_INST["NAME"] = UI::QueryWidget(`id(`user_name), `Value);
					DB2DATA::DB2_INST["INSTANCE"] = UI::QueryWidget(`id(`user_name), `Value);
				}



				if (UI::QueryWidget(`id(`group_name), `Value) == "" && retval == `next)
				{
					Popup::Message("Group Name\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_INST["GROUP_NAME"] = UI::QueryWidget(`id(`group_name), `Value);



				if (UI::QueryWidget(`id(`home_dir), `Value) == "" && retval == `next)
				{
					Popup::Message("Home directory\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_INST["HOME_DIRECTORY"] = UI::QueryWidget(`id(`home_dir), `Value);



				if (UI::QueryWidget(`id(`passwd), `Value) != UI::QueryWidget(`id(`passwd2), `Value) && retval == `next)
				{
					Popup::Message("The passwords entered do not match. Please re-enter\n" +
						       "the passwords before continuing");
					continue;
				}
				else if (UI::QueryWidget(`id(`passwd), `Value) == "")
				{
					Popup::Message("Password\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_INST["PASSWORD"] = UI::QueryWidget(`id(`passwd), `Value);

				if ((boolean)UI::QueryWidget(`id(`default_uid), `Value) == true )
					DB2DATA::DB2_INST["UID"] = "";
				else if (UI::QueryWidget(`id(`uid), `Value) == "")
				{
					Popup::Message("UID\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_INST["UID"] = UI::QueryWidget(`id(`uid), `Value);



				if ((boolean)UI::QueryWidget(`id(`default_gid), `Value) == true) 
					DB2DATA::DB2_INST["GID"] = "";
				else if (UI::QueryWidget(`id(`gid), `Value) == "")
				{
					Popup::Message("GID\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_INST["GID"] = UI::QueryWidget(`id(`gid), `Value);

	
				return(retval);
			}
			else if ( DB2DATA::DB2_INST["__EXISTING_USER"]:false == true) {
				DB2DATA::DB2_INST["NAME"] = UI::QueryWidget(`id(`name), `Value);
				DB2DATA::DB2_INST["INSTANCE"] = UI::QueryWidget(`id(`name), `Value);
				return retval;
			}
		}
		return retval;
	}
			

	define void fenced_check() 
	``{
		UI::ChangeWidget(`id(`rb1),`Notify,true);
		UI::ChangeWidget(`id(`rb2),`Notify,true);
		if ((boolean)UI::QueryWidget(`id(`rb1),`Value) == true) {
			UI::ChangeWidget(`id(`name),`Enabled,false);
			UI::ChangeWidget(`id(`user_name),`Enabled,true);
			UI::ChangeWidget(`id(`uid),`Enabled,true);
			UI::ChangeWidget(`id(`group_name),`Enabled,true);
			UI::ChangeWidget(`id(`gid),`Enabled,true);
			UI::ChangeWidget(`id(`default_gid),`Enabled,true);
			UI::ChangeWidget(`id(`passwd),`Enabled,true);
			UI::ChangeWidget(`id(`passwd2),`Enabled,true);
			UI::ChangeWidget(`id(`home_dir),`Enabled,true);
			DB2DATA::DB2_FENCED["__NEW_USER"] = true;
			DB2DATA::DB2_FENCED["__EXISTING_USER"] = false;
			
			
		}
		else {
			UI::ChangeWidget(`id(`name),`Enabled,true);
			UI::ChangeWidget(`id(`user_name),`Enabled,false);
			UI::ChangeWidget(`id(`uid),`Enabled,false);
			UI::ChangeWidget(`id(`group_name),`Enabled,false);
			UI::ChangeWidget(`id(`gid),`Enabled,false);
			UI::ChangeWidget(`id(`default_gid),`Enabled,false);
			UI::ChangeWidget(`id(`passwd),`Enabled,false);
			UI::ChangeWidget(`id(`passwd2),`Enabled,false);
			UI::ChangeWidget(`id(`home_dir),`Enabled,false);
			DB2DATA::DB2_FENCED["__NEW_USER"] = false;
			DB2DATA::DB2_FENCED["__EXISTING_USER"] = true;
		}
	}

	global define any stage_6c(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{

		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);


		if(DB2DATA::DB2["__CREATE_INSTANCE"]:false == false) {
			return(`next);	
		}		
		headline  = "Set user information for the fenced user";

		/* FIXME: add help text */
		string help_text = help(wizard_stage);

		

		contents = `VBox(
				`VWeight(1, `RichText(`opt(`shrinkable),"Enter the required user information for the fenced user.  Fenced user defined functions (UDFs) and the stored procedures will execute under this user and group. For security reasons it is recommended that you do not use the same user account for the fenced user as you used for the instance-owning user.")),
				`VWeight(5, `RadioButtonGroup(`id(`rb), `VBox(
					`Left(`RadioButton(`id(`rb1), "Ne&w user", DB2DATA::DB2_FENCED["__NEW_USER"]:false )),
					`VBox(
						`HBox(
							`HWeight(2, `Label("New User")),
							`HWeight(3, `TextEntry(`id(`user_name), "", DB2DATA::DB2_FENCED["FENCED_USERNAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("UID")),
							`HWeight(3, `TextEntry(`id(`uid), "", DB2DATA::DB2_FENCED["FENCED_UID"]:"error")),
						 	`HWeight(3, `CheckBox(`id(`default_uid), _("&Use default UID"),
								DB2DATA::DB2_FENCED["FENCED_UID"]:"" == ""))
						),

						`HBox(
							`HWeight(2, `Label("Group name")),
							`HWeight(3, `TextEntry(`id(`group_name), "", DB2DATA::DB2_FENCED["FENCED_GROUP_NAME"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("GID")),
							`HWeight(3, `TextEntry(`id(`gid), "", DB2DATA::DB2_FENCED["FENCED_GID"]:"error")),
							`HWeight(3, `CheckBox(`id(`default_gid), _("Use default &GID"),
								DB2DATA::DB2_FENCED["FENCED_GID"]:"" == ""))
						),
						`HBox(
							`HWeight(2, `Label("Password")),
							`HWeight(3, `Password(`id(`passwd), "", DB2DATA::DB2_FENCED["FENCED_PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Confirm password")),
							`HWeight(3, `Password(`id(`passwd2), "", DB2DATA::DB2_FENCED["FENCED_PASSWORD"]:"error")),
							`HWeight(3, `HStretch())
						),
						`HBox(
							`HWeight(2, `Label("Home directory")),
							`HWeight(3, `TextEntry(`id(`home_dir), "", DB2DATA::DB2_FENCED["FENCED_HOME_DIRECTORY"]:"error")),
							`HWeight(3, `HStretch())
						)
					),
					`Left(`RadioButton(`id(`rb2), "&Existing user", DB2DATA::DB2_FENCED["__EXISTING_USER"]:false )), 
						`HBox(
							`HWeight(2, `Label("User name")),
							`HWeight(3, `ComboBox(`id(`name),"", get_users())),
							`HWeight(3, `HStretch())
						),
						`Frame(
							_("For users of NIS or similar management systems"),
							`Label("If the user information in your environment is managed remotely\n" +
								"by NIS or a similar system, you must specify an existing user. ")
						)
					)
				)));



		Wizard::SetContents(headline, contents, help_text, have_back_button, have_next_button);
		fenced_check();
			

		while(true)
		{
			retval = UI::UserInput();
			
			
			fenced_check();


			if (retval == `rb1 || retval == `rb2) {
				continue;
			}


			if(retval == `back || retval == `abort) {
				return retval;
			}
		
			if ( DB2DATA::DB2_FENCED["__NEW_USER"]:false == true) {

				if (UI::QueryWidget(`id(`user_name), `Value) == "" && retval == `next) {
					Popup::Message("User Name\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_FENCED["FENCED_USERNAME"] = UI::QueryWidget(`id(`user_name), `Value);



				if (UI::QueryWidget(`id(`group_name), `Value) == "" && retval == `next)
				{
					Popup::Message("Group Name\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_FENCED["FENCED_GROUP_NAME"] = UI::QueryWidget(`id(`group_name), `Value);



				if (UI::QueryWidget(`id(`home_dir), `Value) == "" && retval == `next)
				{
					Popup::Message("Home directory\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_FENCED["FENCED_HOME_DIRECTORY"] = UI::QueryWidget(`id(`home_dir), `Value);



				if (UI::QueryWidget(`id(`passwd), `Value) != UI::QueryWidget(`id(`passwd2), `Value) && retval == `next)
				{
					Popup::Message("The passwords entered do not match. Please re-enter\n" +
						       "the passwords before continuing");
					continue;
				}
				else if (UI::QueryWidget(`id(`passwd), `Value) == "")
				{
					Popup::Message("Password\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_FENCED["FENCED_PASSWORD"] = UI::QueryWidget(`id(`passwd), `Value);

				if ((boolean)UI::QueryWidget(`id(`default_uid), `Value) == true )
					DB2DATA::DB2_FENCED["FENCED_UID"] = "";
				else if (UI::QueryWidget(`id(`uid), `Value) == "")
				{
					Popup::Message("UID\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_FENCED["FENCED_UID"] = UI::QueryWidget(`id(`uid), `Value);



				if ((boolean)UI::QueryWidget(`id(`default_gid), `Value) == true) 
					DB2DATA::DB2_FENCED["FENCED_GID"] = "";
				else if (UI::QueryWidget(`id(`gid), `Value) == "")
				{
					Popup::Message("GID\nYou must specify a value");
					continue;
				}
				else
					DB2DATA::DB2_FENCED["FENCED_GID"] = UI::QueryWidget(`id(`gid), `Value);

	
				return(retval);
			}
			else if ( DB2DATA::DB2_FENCED["__EXISTING_USER"]:false == true) {
				DB2DATA::DB2_FENCED["FENCED_USERNAME"] = UI::QueryWidget(`id(`name), `Value);
				return retval;
			}
		}
		return retval;
	}

	global define any stage_6d(integer wizard_stage, boolean have_back_button, boolean have_next_button) 
	``{
		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);
		
		if(DB2DATA::DB2["__CREATE_INSTANCE"]:false == false) {
			return(`next);	
		}
		headline  = "Prepare the DB2 tools catalog";

		string help_text = help(wizard_stage);

		contents = `VBox(
			`RichText("Before you can use certain DB2 tools such as the Task Center and scheduler, you must create the DB2 tools catalog. The DB2 tools catalog contains task metadata. The Db2 Setup wizard can prepare a local database to store this metadata. Specify whether to prepare the DB2 tools catalog."),
			`RadioButtonGroup(`id(`rb), `VBox( 
			`Left(`RadioButton(`id(`rb1), _("Use a &local database"),
				DB2DATA::DB2_TOOLS["LOCATION"]:"not local" == "Local")),
			`Left(`RadioButton(`id(`rb2), _("Do not prepare the DB2 tools catalog on this computer"),
				DB2DATA::DB2_TOOLS["__NO_TOOLS"]:false))
			)));



		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button );

		while(true) {
			retval = UI::UserInput();
			if (retval == `next && UI::QueryWidget(`id(`rb1), `Value) == true) {
				DB2DATA::DB2_TOOLS["LOCATION"] = "Local";
				DB2DATA::DB2_TOOLS["__NO_TOOLS"] = false;
			}
			else {
				DB2DATA::DB2_TOOLS["__NO_TOOLS"] = true;
			}
			return retval;
		}
	}
				
				
	global define any stage_6e(integer wizard_stage, boolean have_back_button, boolean have_next_button) 
	``{
		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);

		
		if(DB2DATA::DB2["__CREATE_INSTANCE"]:false == false) {
			return(`next);	
		}
		
		if(DB2DATA::DB2["__NO_TOOLS"]:false == true) {
			return(`next);	
		}
		headline = "Specify a local database to store the DB2 tools catalog";

		string help_text = help(wizard_stage);

		contents = `VBox(
			`RichText("The DB2 tools catalog will be stored in a local database.  Specify the required information for the database. If the database does not exist, it will be created for you.."),
			`HBox(

		
				`HWeight(2, `Label("Instance")),
				`HWeight(3, `TextEntry(`id(`instance), "", DB2DATA::DB2_INST["INSTANCE"]:"error")),
				`HWeight(3, `HStretch())
			),
			
			`HBox(

		
				`HWeight(2, `Label("Database")),
				`HWeight(3, `TextEntry(`id(`database), "", DB2DATA::DB2_TOOLS["DATABASE"]:"error")),
				`HWeight(3, `HStretch())
			),
			`HBox(
				`HWeight(2, `Label("Schema")),
				`HWeight(3, `TextEntry(`id(`schema), "", DB2DATA::DB2_TOOLS["TOOLS_CATALOG_SCHEMA"]:"error")),
		 		`HWeight(3, `HStretch())
			));
				
		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button );
		UI::ChangeWidget(`id(`instance),`Enabled,false);

		while(true) {
			retval = UI::UserInput();
			if ( retval == `next) {
				if (UI::QueryWidget(`id(`database), `Value) == "") {
					Popup::Message("You must specify a database name");
					continue;
				}
				if (UI::QueryWidget(`id(`schema), `Value) == "") {
					Popup::Message("You must specify a schema name");
					continue;
				}
			}
			DB2DATA::DB2_TOOLS["INSTANCE"] = UI::QueryWidget(`id(`instance), `Value);
			DB2DATA::DB2_TOOLS["DATABASE"] = UI::QueryWidget(`id(`database), `Value);
			DB2DATA::DB2_TOOLS["TOOLS_CATALOG_SCHEMA"] = UI::QueryWidget(`id(`schema), `Value);
			return retval;
		}
	}
		
		 

	global define any stage_7(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);
		headline  = "Set up the administration contact list";

		string help_text = help(wizard_stage);

		map DAS = DB2DATA::DB2_DAS;

		contents = `VBox(
				`RichText("The administration contact list will store contact information used to " +
					  "notify administrators that a database requires attention. Specify whether " +
					  "you want to create a local contact list or use an existing global contact " +
					  "list that resides on a remote DB2 server."),
				`Frame(_("Administration contact list location"),
					`RadioButtonGroup(`id(`rb), `VBox(
						`Left(`RadioButton(`id(0), "&Local - Create a contact list on this system",
							DAS["DAS_CONTACT_LIST"]:"error" == "LOCAL")),
						`Left(`RadioButton(`id(1), "Re&mote - Use an existing contact list that resides " +
							"on a remote DB2 server",
							DAS["DAS_CONTACT_LIST"]:"error" == "REMOTE")),
						`HBox(
							`Label("Remote DB2 server host name"),
							`TextEntry(`id(`host_name), "", DAS["DAS_CONTACT_LIST_HOSTNAME"]:"error")
						)
					))
				),
				`Frame(_("Notification SMTP server"), `VBox(
					`RichText("Type the SMTP server that will send email and pager notifications " +
						"to your administration contact."),
					`Left(`CheckBox(`id(`enable_notification), _("&Enable notification"),
						DAS["DAS_SMTP_SERVER"]:"error" != "")),
					`HBox(
						`Label("Notification SMTP server"),
						`TextEntry(`id(`smtp_server), "", DAS["DAS_SMTP_SERVER"]:"error")
					)
				)));


		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);

		while(true)
		{
			retval = UI::UserInput();



			if (retval == `next)
			{
				if (UI::QueryWidget(`id(`rb), `CurrentButton) == 0)
				{
					DAS["DAS_CONTACT_LIST"] = "LOCAL";
					DAS["DAS_CONTACT_LIST_HOSTNAME"] = "";
				}
				else if (UI::QueryWidget(`id(`host_name), `Value) == "")
				{
					Popup::Message("Remote DB2 server host name missing");
					continue;
				}
				else
				{
					DAS["DAS_CONTACT_LIST"] = "REMOTE";
					DAS["DAS_CONTACT_LIST_HOSTNAME"] = UI::QueryWidget(`id(`host_name), `Value );
				}

				if ((boolean)UI::QueryWidget(`id(`enable_notification), `Value))
				{
					if ((string)UI::QueryWidget(`id(`smtp_server), `Value) == "")
					{
						Popup::Message("SMTP server name missing");
						continue;
					}
					else
						DAS["DAS_SMTP_SERVER"] = UI::QueryWidget(`id(`smtp_server), `Value);
				}
				else
					DAS["DAS_SMTP_SERVER"] = "";
			}
			else if(retval == `back) {
				DB2DATA::DB2["__GO_BACK"] = true;
			}
			else {
				
				DB2DATA::DB2["__GO_BACK"] = false;
			}

			return(retval);
		}
	}


	void contact_check()
	``{
		UI::ChangeWidget(`id(`rb1),`Notify,true);
		UI::ChangeWidget(`id(`rb2),`Notify,true);
		if ((boolean)UI::QueryWidget(`id(`rb1),`Value) == true) {
			UI::ChangeWidget(`id(`name),`Enabled,true);
			UI::ChangeWidget(`id(`email),`Enabled,true);
			UI::ChangeWidget(`id(`cb),`Enabled,true);
			DB2DATA::DB2_CONTACT["__NEW_CONTACT"] = true;
			DB2DATA::DB2_CONTACT["__NO_CONTACT"] = false;
			
			
		}
		else {
			UI::ChangeWidget(`id(`name),`Enabled,false);
			UI::ChangeWidget(`id(`email),`Enabled,false);
			UI::ChangeWidget(`id(`cb),`Enabled,false);
			DB2DATA::DB2_CONTACT["__NEW_CONTACT"] = false;
			DB2DATA::DB2_CONTACT["__NO_CONTACT"] = true;
		}
	}

	global define any stage_7a(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{

		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);

		if(DB2DATA::DB2["__CREATE_INSTANCE"]:false == false) {
			return(`next);	
		}
		headline = "Specify a contact for health monitor notification";

		string help_text = help(wizard_stage);

		contents = `VBox(
				`RichText( `opt(`shrinkable),"By default, a health monitor runs in the DB2 instance you are setting up. When a health indicator threshold is breached, email or pager notification will be sent to an administration contact. Specify a new or existing contact for health monitor notification. If your contact list resides on a remote DB2 server, you must provide a user name and a password for logon."),
				`Frame(_("Administration contact list location"),
					`RadioButtonGroup(`id(`rb), `VBox(
						`Left(`RadioButton(`id(`rb1), "Ne&w contact",
							DB2DATA::DB2_CONTACT["__NEW_CONTACT"]:false)),
						`VBox(
						`HBox(
							`HWeight(2,`Label("Name")),
							`HWeight(2,`TextEntry(`id(`name), "", DB2DATA::DB2_CONTACT["CONTACT_NAME"]:"error")),
							`HWeight(3,`HStretch())
						),
							
						`HBox(
							`HWeight(2,`Label("Email address")),
							`HWeight(2,`TextEntry(`id(`email), "", DB2DATA::DB2_CONTACT["EMAIL"]:"error")),
							`HWeight(3,`HStretch())
						)),
						`HBox(
							`HWeight(2,`HStretch()),
							`HWeight(2,`CheckBox(`id(`cb), "Address is for a pager", DB2DATA::DB2_CONTACT["PAGER"]:false)),
							`HWeight(3,`HStretch())
						),
						`Left(`RadioButton(`id(`rb2), _("&Defer this task until after installation is complete"),
							DB2DATA::DB2_CONTACT["__NO_CONTACT"]:false))
					)
					
				)),
				`VStretch()
				);

		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button);

		contact_check();

		while(true)
		{
			retval = UI::UserInput();
			contact_check();


			if (retval == `rb1 || retval == `rb2) {
				continue;
			}


			if(retval == `back || retval == `abort) {
				if( DB2DATA::DB2_CONTACT["__NEW_CONTACT"]:false == true) {
					DB2DATA::DB2_CONTACT["CONTACT_NAME"] = 	(string) UI::QueryWidget(`id(`name), `Value);
					DB2DATA::DB2_CONTACT["EMAIL"] = 	(string) UI::QueryWidget(`id(`email), `Value);
					DB2DATA::DB2_CONTACT["PAGER"] = 	(boolean) UI::QueryWidget(`id(`cb), `Value);
				}
					
				
				return retval;
			}
			if( DB2DATA::DB2_CONTACT["__NEW_CONTACT"]:false == true) {
				if ( size((string) UI::QueryWidget(`id(`name), `Value)) == 0) {
					Popup::Message("You must specify a Name");
					continue;
				}
				else {
					DB2DATA::DB2_CONTACT["CONTACT_NAME"] = 	(string) UI::QueryWidget(`id(`name), `Value);
				}	
				if ( size((string) UI::QueryWidget(`id(`email), `Value)) == 0) {
					Popup::Message("You must specify an Email address");
						continue;
				}
				else {
					DB2DATA::DB2_CONTACT["EMAIL"] = 	(string) UI::QueryWidget(`id(`email), `Value);
				}
					
				DB2DATA::DB2_CONTACT["PAGER"] = 	(boolean) UI::QueryWidget(`id(`cb), `Value);
			}
			
			return retval;
		}
	}	
		
		

	global define any stage_8(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{

		if (DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM")
			return(`next);

		if ( (boolean)DB2DATA::DB2["__DB2_INSTALL"]:false && (boolean)DB2DATA::DB2["__DB2_RESPONSE_FILE"]:false)
		{
			headline = "Start copying files and create response file";

			contents = `VBox(
					`RichText("Setup has enough information to create a response file and start " +
						  "copying the program files. If you want to " +
						  "review or change any settings, click Back. If you are satisfied with " +
						  "the settings, type the response file name and click Next to begin copying " +
						  "files."),
					`Left(`Label(_("Current settings"))),
					`RichText(_("not yet implemented :-)")),
					`TextEntry(`id(`response_file), _("R&esponse file name"),
						DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"]:"error")
					);

		}
		else if ((boolean)DB2DATA::DB2["__DB2_INSTALL"]:false)
		{
			headline = "Start copying files";

			contents = `VBox(
					`RichText("The DB2 Setup wizard has enough information to start copying the " +
						  "program files. If you want to review or change any settings, click " +
						  "Back. If you are satisfied with the settings, click Finish to begin " +
						  "copying files.")
					/*`Left(`Label("Current settings")),
					`RichText(_("not yet implemented :-)"))*/
					);
		}
		else if ( (boolean) DB2DATA::DB2["__DB2_RESPONSE_FILE"]:false)
		{
			headline = "Create a response file";

			contents = `VBox(
					`RichText("The DB2 Setup wizard has enough information to create a response file. " +
						  "If you want to review or change any settings, click " +
						  "Back. If you are satisfied with the settings, type the response file " +
						  "name and click Finish to create it."),
					/*`Left(`Label("Current settings")),
					`RichText(_("not yet implemented :-)")),*/
					`TextEntry(`id(`response_file), _("R&esponse file name"),
						DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"]:"error")
					);
		}
		else
			Popup::Notify("Internal Error");


		string help_text = help(wizard_stage);


		Wizard::SetContents(headline, contents, help_text, have_back_button,
			have_next_button );

		retval = UI::UserInput();

		if ((boolean)DB2DATA::DB2["__DB2_RESPONSE_FILE"]:false)
			DB2DATA::DB2["__DB2_RESPONSE_FILE_PATH"] = UI::QueryWidget(`id(`response_file), `Value);

		return(retval);
	}





	global define any stage_9()
	``{
		/* there is no GUI for this stage */
		if ( DB2DATA::DB2["__DB2_RESPONSE_FILE"]:false == true) {
			return(DB2INSTALL::write_response_file());
		}
		else {
			return(`next);
		}
	}





	global define any stage_10(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		if ((string) DB2DATA::DB2["INSTALL_TYPE"]:"error" == "CUSTOM") {

			headline = "Install DB2 UDB Enterprise Server Edition using DB2 Setup Wizzard";
			string help_text = help(wizard_stage);
			contents = `RichText("Yast2 will start now the DB2 Setup Wizzard.");
			Wizard::SetContents(headline, contents, help_text, have_back_button,
					    have_next_button);

			UI::ChangeWidget(`id(`abort),`Enabled,false);
			UI::ChangeWidget(`id(`next),`Enabled,false);

			string prog = "/bin/bash -c " + DB2DATA::DB2["__PATH_TO_SETUP"]:"/media/cdrom" + "/db2setup";
			
			map m = (map)SCR::Execute(.target.bash_output, prog, $[ "LD_ASSUME_KERNEL": "2.4.21"]);
		
			UI::ChangeWidget(`id(`next),`Enabled,true);
			if (m["exit"]:0 == 0) {
				
				return(`next);
			}
			else {
				return(`next);
			}
		}


		else if (DB2DATA::DB2["__DB2_INSTALL"]:false) 	{
			headline = "Install DB2 UDB Enterprise Server Edition";

			/* FIXME: add help text */
			string help_text = help(wizard_stage);

			contents = `RichText("Please wait while DB2 Setup wizard installs DB2 UDB Enterprise " +
					     "Server Edition on your computer and performs the required " +
					     "configuration. This may take several minutes. ");
				
			/* set wizard content, headline and help text */	
			Wizard::SetContents(headline, contents, help_text, have_back_button,
					    have_next_button);
			
			UI::ChangeWidget(`id(`abort),`Enabled,false);
			UI::ChangeWidget(`id(`next),`Enabled,false);
			/* install DB2 UDB */
			boolean check = DB2INSTALL::install_db2();
			UI::ChangeWidget(`id(`next),`Enabled,true);
			return(`next);
		}
		else
			return(`next);
	}


	define string read_status_report()
	``{
		return((string)SCR::Read(.target.string,DB2DATA::DB2["__SETUP_LOG"]:""));		
	
	}


	global define any stage_11(integer wizard_stage, boolean have_back_button, boolean have_next_button)
	``{
		headline = "Setup is complete";

		/* FIXME: add help text */
		string help_text = help( wizard_stage);

		contents = `VBox(
				`RichText("The DB2 Setup wizard has finished copying files and configuring " +
					  "your system" +
					  "<p>" +
					  "<h3>Post-install steps</h3>" +
					  "It is recommended that you perform the following after installation, " +
					  "if you have not already done so." +
					  "<ul>" +
					  "<li>Install the DB2 documentation from CD labelled DB2 HTML Documentation.</li>" +
					  "" +
					  "<li>Set up a DB2 instance to work with DB2.</li>" +
					  "" +
					  "<li>Specify the SMTP Server to be used by the DB2 Administration Server to send" +
					  "notifications to administration contacts.</li>" +
					  "" +
					  "<li>Run First Steps (db2fs) as a regular user to get started with DB2 and some" +
					  "of its features.</li>" +
					  "</ul>"),
				`RichText( `opt(`plainText), read_status_report()),
				`Left(`Label("Click Finish to exit the DB2 Setup wizard."))
				);


		/* set wizard content, headline and help text */	
		Wizard::SetContents(headline, contents, help_text, have_back_button,
				    have_next_button);

		UI::ChangeWidget(`id(`next),`Label,"Finish");
		UI::ChangeWidget(`id(`abort),`Enabled,false);

		retval = UI::UserInput();
	
		
	}





}
